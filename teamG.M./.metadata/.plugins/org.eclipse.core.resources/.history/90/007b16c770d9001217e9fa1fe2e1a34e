package com.jemcphe.teamgm;

import java.util.ArrayList;
import java.util.HashMap;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.actionbarsherlock.app.SherlockActivity;
import com.devspark.appmsg.AppMsg;
import com.jemcphe.LayoutLib.SpinnerDisplay;
import com.jemcphe.LayoutLib.TeamSearch;
import com.jemcphe.LeagueLib.DataService;
import com.jemcphe.LeagueLib.FileInfo;
import com.jemcphe.LeagueLib.TeamProvider;
import com.jemcphe.LeagueLib.WebData;

import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Messenger;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ScrollView;
import android.widget.SimpleAdapter;
import android.widget.Toast;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.view.View.OnClickListener;

public class MainActivity extends SherlockActivity {
	//Create Linear Layouts
	LinearLayout _mainLayout;
	LinearLayout _historyLayout;
	LinearLayout _teamLayout;
	//Create Displays
	TeamSearch _search;
	//TeamDisplay _teamDisplay;
	SpinnerDisplay _teamList;

	
	//Declare Variables
	ScrollView _scrollView;
	TextView _searchLabel;
	TextView dataBox;
	TextView _teamData;
	TextView _historyLabel;
	public static EditText field;
	RadioGroup teamOptions;
	String[] teamNames;
	Boolean _connected = false;
	Context _context;
	HashMap<String, String> _history;
	JSONArray _data;
	JSONObject _teamObject;
	ImageView _headerImage;
	ImageView _startingImage;
	ListView listview;

	//TeamDisplay Variables for setting values
	String _teamName;
	String _pitcher;
	String _catcher;
	String _first;
	String _second;
	String _third;
	String _short;
	String _left;
	String _center;
	String _right;

	public static String firstNameUri;
	public static String lastNameUri;
	public static String conferenceUri;


	//FUNCTION FOR UPDATING TEAM DATA ON THE SCREEN
	public void updateData(JSONArray data){
		Log.i("JSONArray data", data.toString());
		ArrayList<HashMap<String, String>> teamList = new ArrayList<HashMap<String, String>>();

		try {
			for(int i=0; i<data.length(); i++){
				JSONObject teamObject = data.getJSONObject(i);
				Log.i("JSONObject", teamObject.toString());
				Log.i("JSONObject", teamObject.getString("first_name"));
				String teamName = teamObject.getString("first_name") + " " + teamObject.getString("last_name");
				String wins = teamObject.getString("won");
				String losses = teamObject.getString("lost");

				//Create HashMap for data
				HashMap<String, String> displayMap = new HashMap<String, String>();
				displayMap.put("team", teamName);
				displayMap.put("wins", wins);
				displayMap.put("losses", losses);

				teamList.add(displayMap);
			}

			//Set up the Adapter
			SimpleAdapter adapter = new SimpleAdapter(this, teamList, R.layout.list_row,
					new String[] {"team", "wins", "losses"}, 
					new int[] {R.id.team, R.id.wins, R.id.losses});

			//Instantiate the Adapter
			listview.setAdapter(adapter);

		} catch (JSONException e) {
			// TODO Auto-generated catch block
			Log.e("JSON ERROR", e.toString());
		}

		//LEGACY GRIDLAYOUT
		//		((TextView) findViewById(R.id.teamNameData)).setText(data.getString("location") + " " + data.getString("name"));
		//		((TextView) findViewById(R.id.pitcherData)).setText(data.getString("pitcher"));
		//		((TextView) findViewById(R.id.catcherData)).setText(data.getString("catcher"));
		//		((TextView) findViewById(R.id.firstData)).setText(data.getString("first"));
		//		((TextView) findViewById(R.id.secondData)).setText(data.getString("second"));
		//		((TextView) findViewById(R.id.thirdData)).setText(data.getString("third"));
		//		((TextView) findViewById(R.id.shortData)).setText(data.getString("short"));
		//		((TextView) findViewById(R.id.leftData)).setText(data.getString("left"));
		//		((TextView) findViewById(R.id.centerData)).setText(data.getString("center"));
		//		((TextView) findViewById(R.id.rightData)).setText(data.getString("right"));

	}


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		//SET THE MAIN VIEW
		setContentView(R.layout.applayout);

		//HEADER IMAGE
		_headerImage = (ImageView) findViewById(R.drawable.header);

		//UNIVERSAL CONTEXT VARIABLE
		_context = this;

		//DEFINE LAYOUT THAT WILL HOLD TEAM DATA
		_teamLayout = (LinearLayout) findViewById(R.id.teamDataLayout);

		//Determine data connection
		_connected = WebData.getConnectionStatus(_context);

		//Check for connection
		if(_connected) {
			//DISPLAY CONNECTION TYPE TO USER
			Toast toast = Toast.makeText(_context, "Currently connected via " + WebData.getConnectionType(_context).toString(), Toast.LENGTH_SHORT);
			toast.show();
			Log.i("Network Connection", WebData.getConnectionType(_context));
		} else {
			//LET USER KNOW THEY HAVE NO DATA
			Toast toast = Toast.makeText(_context, "YOU CURRENTLY HAVE NO DATA CONNECTION!!", Toast.LENGTH_LONG);
			toast.show();
		}

		//Create LinearLayout for Main Layout
		_mainLayout = (LinearLayout) findViewById(R.layout.applayout);

		//DEFINE EDITTEXT FIELD
		field = (EditText) findViewById(R.id.searchField);
		//field.setText(TeamProvider.TeamData.CONTENT_URI.toString());
		//DEFINE THE SEARCH BUTTON
		Button searchButton = (Button) findViewById(R.id.searchButton);

		//Create the Listview
		listview = (ListView) this.findViewById(R.id.list);
		View listHeader = this.getLayoutInflater().inflate(R.layout.list_header, null);
		listview.addHeaderView(listHeader);

		//CREATE AN ONCLICKLISTENER FOR SEARCH BUTTON THAT WILL CALL ON SERVICE CLASS
		searchButton.setOnClickListener(new OnClickListener() {
			@SuppressLint("HandlerLeak")
			@Override
			public void onClick(View v) {
				
				//HANDLE DATA FROM SERVICE
//				Handler dataHandler = new Handler() {
//
//					@Override
//					public void handleMessage(Message msg) {
//						// TODO Auto-generated method stub
//						String response = null;
//						//CHECK FOR PROPER SERVICE COMPLETION
//						if (msg.arg1 == RESULT_OK) {
//
//							try {
//								//TELL DEBUGGER THAT SERVICE HAS FINISHED
//								response = "Service Finished";
//								Log.i("Service Status", response);
//
//									//Parse uri and use getContentResolver
//									String uriString = TeamProvider.TeamData.TEAM_NAME_URI.toString() + field.getText().toString();
//									Uri uri = Uri.parse(uriString);
//									Cursor dataCursor = getContentResolver().query(uri, TeamProvider.TeamData.PROJECTION, null, null, null);
//
//									if(dataCursor.moveToFirst() == true){
//										ArrayList<HashMap<String, String>> teamList = new ArrayList<HashMap<String, String>>();
//
//										for (int i = 0; i<dataCursor.getCount(); i++){
//
//											//Create HashMap for data
//											HashMap<String, String> displayMap = new HashMap<String, String>();
//											displayMap.put("team", dataCursor.getString(1));
//											displayMap.put("conference", dataCursor.getString(2));
//											displayMap.put("wins", dataCursor.getString(3));
//											displayMap.put("losses", dataCursor.getString(4));
//
//											dataCursor.moveToNext();
//
//											teamList.add(displayMap);
//										}
//
//										//Set up the Adapter
//										SimpleAdapter adapter = new SimpleAdapter(_context, teamList, R.layout.list_row, 
//												new String[] {"team", "conference", "wins", "losses"}, new int[] {R.id.team,R.id.conference, R.id.wins, R.id.losses});
//										//Instantiate the Adapter
//										listview.setAdapter(adapter);
//
//									}
//								
//								//								//CREATE A STRING TO HOLD INFORMATION PULLED FROM STORED FILE
//								//								String teamData = FileInfo.readStringFile(_context, "team.txt", true);
//								//								//CREATE JSONARRAY FROM FILE
//								//								_teamObject = new JSONObject(teamData);
//								//								//CREATE JSONOBJECT FROM ARRAY INDEX
//								//								_data = _teamObject.getJSONArray("standing");
//								//								//CALL THE UPDATEDATA FUNCTION DEFINED EARLIER
//								//								updateData(_data);
//								//SET THE TEAMLAYOUT VISIBILITY
//								//_teamLayout.setVisibility(0);
//							}
//							catch (Exception e){
//								/*
//								 * TELL THE USER THAT THEY NEED ENTERED AN INVALID TEAM NAME
//								 * OR THEY NEED TO BE CONNECTED TO INTERNET FOR TEAM INFORMATION
//								 */
//								Toast toast = Toast.makeText(_context, "Please Enter A Valid Team Name Or Try Connecting To Internet For This Team's Information", Toast.LENGTH_LONG);
//								toast.show();
//
//								Log.e("", e.getMessage().toString());
//							}
//						}	
//					}
//				};

				//CHECK FOR USER ENTRY IN EDITTEXT FIELD
				if(field.getText().toString().length() == 0){
					//TELL USER TO ENTER A TEAM
					
					AppMsg toast = AppMsg.makeText(MainActivity.this, "Please Enter A Team Name", AppMsg.STYLE_ALERT);					
//					Toast toast = Toast.makeText(_context, "Please Enter A Team Name", Toast.LENGTH_LONG);
					toast.show();
				} else {
					//Create intent to present DisplayActivity.java
					Intent displayIntent = new Intent(_context, DisplayActivity.class);
					startActivity(displayIntent);
					
//					//CREATE MESSENGER
//					Messenger dataMessenger = new Messenger(dataHandler);
//
//					/*
//					 * CREATE INTENT & PUT MESSENGER_KEY & TEAM_KEY TO BE
//					 * PASSED TO THE DATASERVICE CLASS AND INITIATE THE INTENT
//					 */
//					Intent dataIntent = new Intent(_context, DataService.class);
//					dataIntent.putExtra(DataService.MESSENGER_KEY, dataMessenger);
//					dataIntent.putExtra(DataService.TEAM_KEY, field.getText().toString());
//					startService(dataIntent);
				}
			}
		});      
	}

//	@Override
//	public boolean onCreateOptionsMenu(Menu menu) {
//		// Inflate the menu; this adds items to the action bar if it is present.
//		getMenuInflater().inflate(R.menu.main, menu);
//		return true;
//	}

	/********************************** LEGACY CODE ***********************************/
	//	@SuppressWarnings("unused")
	//	private void getTeam(String team){
	//		Log.i("CLICK: ", "Get Team Initiated");
	//		//String baseURL = "http://jemcphe.cloudant.com/mlb/" + team;
	//		//String baseURL = "https://erikberg.com/mlb/standings.json";
	//		//Create URL to pass to TeamRequest
	//		URL baseURL;
	//		try {
	//			baseURL = new URL("http://jemcphe.cloudant.com/mlb/" + team);
	//			//			finalURL = new URL(baseURL);
	//			//			TeamRequest tr = new TeamRequest();
	//			//			tr.execute(finalURL);
	//		} catch (MalformedURLException e) {
	//			Log.e("BAD URL", "MALFORMED URL");
	//			baseURL = null;
	//		}
	//	}


	//    public void readFile(String team) throws IOException, JSONException{
	//    	String stored = FileInfo.readStringFile(_context, "temp", true);
	//    	JSONObject json = new JSONObject();
	//    	json.put(team, stored);
	//    	_data.put(json);
	//    	StringBuffer teamBuffer = new StringBuffer();
	//    	for(int i=0; i<_data.length();i++){
	//    		String text = _data.getJSONObject(i).getString("name");
	//    		teamBuffer.append(text + "\r\n");
	//    	}
	//    	Log.i("DATA ARRAY", teamBuffer.toString());
	//    }


	//	@SuppressWarnings("unchecked")
	//	private HashMap<String, String> getHistory(){
	//    	Object stored = FileInfo.readObjectFile(_context, "history", true);
	//
	//    	HashMap<String, String> history;
	//    	if(stored == null){
	//    		Toast toast = Toast.makeText(_context, "THERE IS CURRENTLY NO DATA",  Toast.LENGTH_LONG);
	//			toast.show();
	//    		history = new HashMap<String, String>();
	//    	} else {
	//    		history = (HashMap<String, String>) stored;
	//    		Toast toast = Toast.makeText(_context, "DATA PULLED FROM STORAGE ",  Toast.LENGTH_LONG);
	//			toast.show();
	//    	}
	//    	return history;
	//    }


	//	private class TeamRequest extends AsyncTask<URL, Void, String>{
	//		@Override
	//		protected String doInBackground(URL... urls){
	//			String response = "";
	//			for(URL url: urls){
	//				response = WebData.getURLStringResponse(url);
	//			}
	//			return response;
	//		}
	//
	//		@Override
	//		protected void onPostExecute(String result){
	//			//JSON DATA RETRIEVED, Now set TeamDisplay strings
	//			Log.i("URL RESPONSE", result);
	//			try {
	//				JSONArray dataArray = new JSONArray();
	//				JSONObject json = new JSONObject(result);
	//				JSONObject results = json.getJSONObject("info");
	//
	//				Toast toast = Toast.makeText(_context, results.getString("name") + " data displayed & stored to device",  Toast.LENGTH_SHORT);
	//				toast.show();
	//				Log.i("TEAM DATA", results.toString());
	//				Log.i("TEST DATA GRAB", results.getString("location").toString());
	//				updateData(results);
	//				dataArray.put(results);
	//				//					_history.put(results.getString("name"), results.toString());
	//				//					FileInfo.storeObjectFile(_context, "history", _history, true);
	//				//					FileInfo.storeStringFile(_context, "temp", results.toString(), true);
	//
	//			} catch (JSONException e) {
	//				Toast toast = Toast.makeText(_context, "Invalid Team Entry. Please Try Again.", Toast.LENGTH_LONG);
	//				toast.show();
	//				Log.e("JSON", "JSON OBJECT EXCEPTION");
	//			}
	//		}
	//	}


	//	@SuppressWarnings({"rawtypes" })
	//	public void readFromFile(HashMap history) {
	//		Set historySet = history.entrySet();
	//		Iterator i = historySet.iterator();
	//		while(i.hasNext()) {
	//			Map.Entry mapEntry = (Map.Entry) i.next();
	//			//_historyLabel = new TextView(_context);
	//			//_historyLabel.setText(mapEntry.getKey().toString() + "\r\n"+ mapEntry.getKey().toString());
	//			//System.out.println("HASH KEY: "+ mapEntry.getKey());
	//		}
	//		
	//
	//	}


}
