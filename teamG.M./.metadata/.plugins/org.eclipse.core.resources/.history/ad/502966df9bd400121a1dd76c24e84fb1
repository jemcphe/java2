package com.jemcphe.LeagueLib;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.jemcphe.teamgm.MainActivity;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

public class TeamProvider extends ContentProvider {

	//Create Authority
	public static final String AUTHORITY = "com.jemcphe.teamgm.teamprovider";

	public static class TeamData implements BaseColumns {
		//Create URI Definitions
		public static final Uri TEAM_NAME_URI = Uri.parse("content://" + AUTHORITY + "/teams/");
		public static final Uri CONFERENCE_URI = Uri.parse("content://" + AUTHORITY + "/teams/conference/");
		public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.jemcphe.teamgm.team";
		public static final String CONTENT_ITEM_TYPE = "vnd.android.cursor.item /vnd.jemcphe.teamgm.team";

		// Define Columns for erikberg API
		public static final String TEAM_FIRST_NAME_COLUMN = "first_name";
		public static final String TEAM_LAST_NAME_COLUMN = "last_name";
		public static final String TEAM_CONFERENCE_COLUMN = "conference";
		public static final String WIN_COLUMN = "won";
		public static final String LOSS_COLUMN = "lost";

		// Define Columns for ESPN API
//		public static final String TEAM_LOCATION = "location";
//		public static final String TEAM_NAME = "name";
//		public static final String TEAM_ABBREVIATION = "abbreviation";

		public static final String[] PROJECTION = { "_id", TEAM_FIRST_NAME_COLUMN, TEAM_CONFERENCE_COLUMN, WIN_COLUMN, LOSS_COLUMN };

		//Make class private
		private TeamData() {};

	}

	//Define Teams collected from JSON
	public static final int TEAMS_FIRST_NAME = 1;
	public static final int TEAMS_LAST_NAME = 2;
	public static final int TEAMS_CONFERENCE_FILTER = 3;

	//Create URI Matcher
	private static final UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

	//Setup the URI's
	static {
		uriMatcher.addURI(AUTHORITY, "teams/", TEAMS_FIRST_NAME);
		uriMatcher.addURI(AUTHORITY, "teams/", TEAMS_LAST_NAME);
		uriMatcher.addURI(AUTHORITY, "teams/conference/*", TEAMS_CONFERENCE_FILTER);
	}

	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}

	@Override
	public String getType(Uri uri) {
		// TODO Auto-generated method stub

		//Test for which uri is entered
		switch (uriMatcher.match(uri)) {
		case TEAMS_FIRST_NAME:
		case TEAMS_LAST_NAME:
			return TeamData.CONTENT_TYPE;

		
		case TEAMS_CONFERENCE_FILTER:
			return TeamData.CONTENT_ITEM_TYPE;
			
		default:
			break;
		}



		return null;
	}

	@Override
	public Uri insert(Uri uri, ContentValues values) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}

	@Override
	public boolean onCreate() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection,
			String[] selectionArgs, String sortOrder) {
		// TODO Auto-generated method stub

		//Create Cursor
		MatrixCursor result = new MatrixCursor(TeamData.PROJECTION);

		String JSONString = FileInfo.readStringFile(getContext(), "team.txt", true);
		JSONObject jsonObject = null;
		JSONArray teamsArray = null;
		JSONObject team = null;

		try {
			jsonObject = new JSONObject(JSONString);
			teamsArray = jsonObject.getJSONArray(DataService.JSON_STANDING);
		} catch (JSONException e) {
			e.printStackTrace();
		}

		if(teamsArray == null){
			return result;
		}

		//Test for which uri is entered
		switch (uriMatcher.match(uri)) {
		case TEAMS:
			
			//Loop through all JSON Data
			for(int i = 0; i<teamsArray.length(); i++){
				try {
					team = teamsArray.getJSONObject(i);

					//Add objects to the cursor
					result.addRow(new Object[] { i + 1, team.get(DataService.JSON_TEAM), team.get(DataService.JSON_CONFERENCE), team.get(DataService.JSON_WINS), 
							team.get(DataService.JSON_LOSSES)});

				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			break;
		case TEAMS_ID:

			break;
		case TEAMS_CONFERENCE_FILTER:
			
			MainActivity.conferenceRequested = uri.getLastPathSegment();
			Log.i("Conference Requested", MainActivity.conferenceRequested);
			
			//Loop through all JSON Data
			for(int i = 0; i<teamsArray.length(); i++){
				try {
					team = teamsArray.getJSONObject(i);
					Log.i("CONFERENCE FILTER", team.toString());
					if(team.getString(DataService.JSON_CONFERENCE).contentEquals(MainActivity.conferenceRequested)){
						//Add objects to the cursor
						result.addRow(new Object[] { i + 1, team.get(DataService.JSON_TEAM), team.get(DataService.JSON_CONFERENCE), team.get(DataService.JSON_WINS), 
								team.get(DataService.JSON_LOSSES)});
					}
					

				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			
			break;

		default:
			break;
		}

		return result;
	}

	@Override
	public int update(Uri uri, ContentValues values, String selection,
			String[] selectionArgs) {
		// TODO Auto-generated method stub
		throw new UnsupportedOperationException();
	}

}
